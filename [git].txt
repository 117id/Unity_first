[git]
- git init : git의 버전 관리
- vim : 파일관리
- cat : 파일 내용 확인
※ Untracked files : git이 관리중이지 않음.
※ modified : 수정되었음.
- git add [file] : 내용 수정,최초 commit시 사용
- cp : 복사
- commit [ ~ 해당 코드 ~ ] : !
- git diff [코드]..[코드] : 두 코드의 commit 차이 표시.
- reset,revert : 해당 내용 과거로 돌리는 것.
- git commit –a : 전부 commit
- git commit –am ~ : commit 메시지를 바로 입력
- http://www.sha1-online.com/
- commit
- git branch
	1. master : 기본 브랜치
- git branch 브랜치명
	- git checkout 브랜치명
	: 기존 branch 로그아웃 후 해당 브랜치로 로그인
	- 생성한 branch는 생성시 기존 branch내용을 그대로 복사하여 가지고 있음.
	- 기존 branch가 아닌 새로운 브랜치에서 수정한 내용은 기존 내용에 반영되지 않는 독립된 공간임.
- git log --branches --decorate --graph : 브랜치 구조 상세히 표현해줌
- 깃 아이디 변경 : remote origin already exists(기존 원격 저장소가 지정되어 있으므로 해당 저장소를 삭제후 새롭게 지정해주어야 한다
=> 그 방법으로 git remote add origin git@github.com이름:아이디/저장소이름.git
- 참조 사이트 : 생활코딩

=========================================================================================
[원격 브랜치 삭제] git push origin --delete <branchName>
- 참조 사이트 : https://nochoco-lee.tistory.com/139
[github 협업 절차][참조 사이트 : https://gmlwjd9405.github.io/2017/10/27/how-to-collaborate-on-GitHub-1.html]
2. 프로젝트 참여자는 git clone 명령으로 로컬 저장소를 만든다.
- git clone [중앙 remote repository URL]
- git init (해당 디렉터리를 빈 git 저장소로 만드는 작업)
- git remote add origin [중앙 remote repository URL] 
: 현재 작업 중인 git 저장소에 팀의 중앙 원격 저장소를 추가한다.
- git fetch origin master 
: 중앙 원격 저장소 origin의 master 브랜치 데이터를 로컬로 가져오기만 하는 작업 
